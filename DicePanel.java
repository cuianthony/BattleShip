/******************************************************************
 * Description:
 * 
 * The DicePanel class extends JPanel. It is used to animate two
 * 3D rolling dice and to play a rolling dice sound.
 * 
 * The animation is triggered when a player attacks a monster.
 * When the rolling stops, the values of the two dice show the values
 * that are generated by the random number generator before the player
 * attacks.
 * 
 * This attempts to mimic dice rolling when the real game
 * is played.
 * 
 * The rolling of the 3D dice images is triggered by a timer, the
 * timer expires every 50ms.
 * 
 * @author (Anthony Cui) 
 * @version (v1.0)
 * @version (Dec 13, 2015)
 ******************************************************************/
 
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.File;
import javax.swing.Timer;
import javax.swing.event.*;
import java.util.Random;
import sun.audio.*;
import java.io.*;

public class DicePanel extends JPanel
{
    private BufferedImage dice1, dice2, dice, roll0, roll1, roll2, roll3;
    private ImageIcon[] bImageIcon;
    private BufferedImage[] bImage;
    private JLabel diceL1, diceL2;
    //swiing timer used to pace the progress of the animation
    private int counter = 0;
    static int r1, r2;
    static int diceTotal = 0;
    static Timer timer;
    
    /******************************************************************
     * Description:
     * The DicePanel constructor.
     * 
     * Limitations: none
     *****************************************************************/
    public DicePanel()
    {
        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
        bImageIcon = new ImageIcon[6];
        bImage = new BufferedImage[6];
        //read images
        try{
            dice = ImageIO.read(new File("dice.png"));
            bImage[0] = ImageIO.read(new File("dice1.png"));
            bImage[1] = ImageIO.read(new File("dice2.png"));
            bImage[2] = ImageIO.read(new File("dice3.png"));
            bImage[3] = ImageIO.read(new File("dice4.png"));
            bImage[4] = ImageIO.read(new File("dice5.png"));
            bImage[5] = ImageIO.read(new File("dice6.png"));
            //these images are used for dice roll animation
            roll0 = ImageIO.read(new File("roll1.png"));
            roll1 = ImageIO.read(new File("roll2.png"));
            roll2 = ImageIO.read(new File("roll3.png"));
            roll3 = ImageIO.read(new File("roll4.png"));
        }catch(IOException e){
            System.err.println("Image for dice not Found...");
        }
        
        for(int i=0; i<6; i++)
        {
            bImageIcon[i] = new ImageIcon(bImage[i]);
        }
        
        diceL1 = new JLabel(new ImageIcon(dice));
        diceL1.setOpaque(false); 
        diceL2 = new JLabel(new ImageIcon(dice));
        diceL2.setOpaque(false); 
        
        //pack the two dice.
        add(diceL1);
        add(Box.createRigidArea(new Dimension(30,0)));
        add(diceL2);
        
        //create a swing timer, please not the timer is not started.
        timer = new Timer(0,performAnimation);
        
    }
    
    /******************************************************************
     * Description:
     * The method plays a dice rolling sound
     * 
     * Limitations: none
     *****************************************************************/
    static void playSound()
    {
        try
        {
            String soundFile = "shake_dice.wav";
            InputStream in = new FileInputStream(soundFile);
            
            AudioStream audioStream = new AudioStream(in);
            
            AudioPlayer.player.start(audioStream);
        }
        catch(Exception e)
        {
            System.out.println("Sound file exception");
        }
    }
    
    /******************************************************************
     * Description:
     * Return the dice total rolled
     * 
     * Limitations: none
     *****************************************************************/
    static int getDiceTotal()
    {
        return diceTotal;
    }
    
    /******************************************************************
     * Description:
     * Start a timer and animate the rolling of dice
     * 
     * Limitations: none
     *****************************************************************/
    static void animateDiceRoll(int d1, int d2)
    {
        r1 = d1;
        r2 = d2;

        timer.setRepeats(true);
        timer.setDelay(50);
        timer.start();
        playSound();
    }
    
    /**************************************************************************************
     * Description:
     * This is the ActionListener used to listen to the expiration of the swing timer.
     * Every time the timer expires, the listener "performAnimation" is called. 
     * The timer is set to expire every 50ms. This is used for dice roll animation
     **************************************************************************/
    ActionListener performAnimation = new ActionListener()
    {
        public void actionPerformed(ActionEvent evt)
        {
            if(counter == 12)
            {
                //dice stops here
                diceL1.setIcon(bImageIcon[r1]);
                diceL2.setIcon(bImageIcon[r2]);
                counter =0;
                timer.stop();
            } else {
                //dice roll animation
                int i = counter%4;
                if (i == 0){
                    diceL1.setIcon(new ImageIcon(roll0));
                    diceL2.setIcon(new ImageIcon(roll0));
                }else if (i ==1) {
                    diceL1.setIcon(new ImageIcon(roll1));
                    diceL2.setIcon(new ImageIcon(roll1));
                }else if ( i==2) {
                    diceL1.setIcon(new ImageIcon(roll2));
                    diceL2.setIcon(new ImageIcon(roll2));
                }else if (i == 3) {
                    diceL1.setIcon(new ImageIcon(roll3));
                    diceL2.setIcon(new ImageIcon(roll3));
                }                
                counter++;
            }
        }
    };     
}
